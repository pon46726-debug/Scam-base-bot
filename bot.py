import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
USERNAME, DESCRIPTION, EVIDENCE = range(3)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ADMIN_CHAT_ID = 12345678  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô ID
DB_NAME = "scam_reports.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT NOT NULL,
            description TEXT NOT NULL,
            evidence_type TEXT NOT NULL,
            evidence_data TEXT,
            evidence_caption TEXT,
            status TEXT DEFAULT 'pending',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î
def save_report(user_id, username, description, evidence_type, evidence_data, evidence_caption=""):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO reports (user_id, username, description, evidence_type, evidence_data, evidence_caption)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (user_id, username, description, evidence_type, evidence_data, evidence_caption))
    report_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return report_id

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_last_report(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, username, status FROM reports
        WHERE user_id = ?
        ORDER BY created_at DESC
        LIMIT 1
    """, (user_id,))
    row = cursor.fetchone()
    conn.close()
    return row  # (id, username, status)

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ pending –∑–∞—è–≤–∫–∏
def get_pending_reports():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, user_id, username, description FROM reports WHERE status = 'pending'")
    rows = cursor.fetchall()
    conn.close()
    return rows  # [(id, user_id, username, description), ...]

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Å–∫–∞–º–µ—Ä—ã
def get_approved_scammer_usernames():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT username FROM reports WHERE status = 'approved'")
    rows = cursor.fetchall()
    conn.close()
    return [row[0] for row in rows]

# –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
def update_report_status(report_id, status):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE reports SET status = ? WHERE id = ?", (status, report_id))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∑–∞—è–≤–∫—É –ø–æ ID
def get_report_by_id(report_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM reports WHERE id = ?", (report_id,))
    row = cursor.fetchone()
    conn.close()
    return row

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üõ°Ô∏è –ë–æ—Ç-–∞–Ω—Ç–∏-—Å–∫–∞–º\n\n"
        "–ü–æ–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ, –Ω–µ –≤ —á—ë—Ä–Ω–æ–º –ª–∏ —Å–ø–∏—Å–∫–µ –∫—Ç–æ-—Ç–æ.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/add ‚Äî –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n"
        "/status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏"
    )
    await update.message.reply_text(text)

# –ù–∞—á–∞–ª–æ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
async def add_scammer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º (–∏–ª–∏ ID) –º–æ—à–µ–Ω–Ω–∏–∫–∞:")
    return USERNAME

async def receive_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['username'] = update.message.text.strip()
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ:")
    return DESCRIPTION

async def receive_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ):")
    return EVIDENCE

async def receive_evidence(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = context.user_data['username']
    description = context.user_data['description']

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        caption = update.message.caption or ""
        report_id = save_report(user_id, username, description, 'photo', file_id, caption)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        try:
            await context.bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=file_id,
                caption=(
                    f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{report_id}\n"
                    f"–û—Ç: @{update.effective_user.username or user_id}\n"
                    f"–ú–æ—à–µ–Ω–Ω–∏–∫: @{username}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"–°—Ç–∞—Ç—É—Å: pending"
                )
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É: {e}")
    else:
        text_evidence = update.message.text
        report_id = save_report(user_id, username, description, 'text', text_evidence)
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=(
                    f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{report_id}\n"
                    f"–û—Ç: @{update.effective_user.username or user_id}\n"
                    f"–ú–æ—à–µ–Ω–Ω–∏–∫: @{username}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {text_evidence}\n"
                    f"–°—Ç–∞—Ç—É—Å: pending"
                )
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω—É: {e}")

    await update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{report_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."
    )
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /status
async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    report = get_last_report(user_id)
    if report:
        report_id, scammer, status = report
        status_text = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏',
            'approved': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
            'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
        }.get(status, status)
        await update.message.reply_text(
            f"–í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞:\n"
            f"ID: #{report_id}\n"
            f"–ú–æ—à–µ–Ω–Ω–∏–∫: @{scammer}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}"
        )
    else:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")

# –ê–î–ú–ò–ù–ö–ê

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id):
    return user_id == ADMIN_CHAT_ID

# /pending ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
async def pending_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    reports = get_pending_reports()
    if not reports:
        await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        return

    text = "üìÑ –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:\n\n"
    for r_id, u_id, scammer, desc in reports[:10]:  # –º–∞–∫—Å–∏–º—É–º 10
        text += f"ID: #{r_id} | –ú–æ—à–µ–Ω–Ω–∏–∫: @{scammer}\n"
    text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /approve <ID> –∏–ª–∏ /reject <ID>"
    await update.message.reply_text(text)

# /approve <id>
async def approve_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <ID>")
        return
    try:
        report_id = int(context.args[0])
        update_report_status(report_id, 'approved')
        report = get_report_by_id(report_id)
        if report:
            _, user_id, username, *_ = report
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{report_id} (–º–æ—à–µ–Ω–Ω–∏–∫ @{username}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
            )
        await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{report_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# /reject <id>
async def reject_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <ID>")
        return
    try:
        report_id = int(context.args[0])
        update_report_status(report_id, 'rejected')
        report = get_report_by_id(report_id)
        if report:
            _, user_id, username, *_ = report
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{report_id} (–º–æ—à–µ–Ω–Ω–∏–∫ @{username}) –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )
        await update.message.reply_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{report_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# /scammers ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö
async def list_scammers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    scammers = get_approved_scammer_usernames()
    if not scammers:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤.")
        return
    text = "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –º–æ—à–µ–Ω–Ω–∏–∫–∏:\n\n" + "\n".join(f"@{s}" for s in scammers)
    await update.message.reply_text(text)

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()
    TOKEN = "xxxxxxxx"  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï!
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add", add_scammer)],
        states={
            USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_username)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_description)],
            EVIDENCE: [MessageHandler((filters.PHOTO | filters.TEXT) & ~filters.COMMAND, receive_evidence)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", check_status))
    # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("pending", pending_reports))
    application.add_handler(CommandHandler("approve", approve_report))
    application.add_handler(CommandHandler("reject", reject_report))
    application.add_handler(CommandHandler("scammers", list_scammers))

    application.add_handler(conv_handler)

    application.run_polling()

if __name__ == "__main__":
    main()
